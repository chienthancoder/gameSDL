#include"Map.h"
#include"Game.h"
#include"TextureManager.h"

int lv1[25][25] =
{
	{1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,0,2,2,1,0,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,2,2,1,0,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,2,2,1,0,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{0,2,2,2,2,2,2,1,2,2,1,0,2,2,0,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2},


};

Map::Map() {
	tex1 = texturemanager::LoadTexture("grass_1.png");
	tex2 = texturemanager::LoadTexture("grass_2.png");
	tex3 = texturemanager::LoadTexture("grass_3.png");
	LoadMap(lv1);

	src.x = src.y = 0;
	src.w = src.h = 32;
	dest.w = dest.h = 32;

}

void Map::LoadMap(int arr[25][25])
{
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 25; j++)
		{
			map[i][j] = arr[i][j];
		}
	}
}
void Map::DrawMap()
{
	for (int i = 0; i < 25; i++)
	{
		for (int j = 0; j < 25; j++)
		{
			int type = map[i][j];
			dest.x = i * 32;
			dest.y = j * 32;
			switch (type)
			{
			case 0: {
				texturemanager::Draw(tex1, src, dest);
				break;
			}
			case 1:
				texturemanager::Draw(tex2, src, dest);
				break;
			case 2:
				texturemanager::Draw(tex3, src, dest);
				break;
			default:
				break;
			}
		}
	}
}